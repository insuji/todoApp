{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","work","a","async","AsyncStorage","setItem","travel","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","JSON","stringify","getItem","s","parse","sleep","ms","Promise","resolve","setTimeout","SplashScreen","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","console","log","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteTodo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.38a66f56.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3A3D40\",\n    toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n    StyleSheet,\n    Text,\n    View,\n    TouchableOpacity,\n    TextInput,\n    ScrollView,\n    Alert,\n    Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n    const [working, setWorking] = useState(true);\n\n    const work = async () => {\n        setWorking(true);\n        await AsyncStorage.setItem(\"@target\", \"work\");\n    };\n    const travel = async () => {\n        setWorking(false);\n        await AsyncStorage.setItem(\"@target\", \"travel\");\n    };\n\n    const [text, setText] = useState(\"\");\n    const onChangeText = (payload) => setText(payload);\n\n    const [toDos, setToDos] = useState({});\n\n    useEffect(() => {\n        loadToDos();\n    }, []);\n\n    const saveToDos = async (toSave) => {\n        await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    };\n    const loadToDos = async () => {\n        const s = await AsyncStorage.getItem(STORAGE_KEY);\n        if (s) {\n            setToDos(JSON.parse(s));\n        }\n        const target = await AsyncStorage.getItem(\"@target\");\n        if (target == \"work\") {\n            work();\n        } else {\n            travel();\n        }\n    };\n\n    const delay_splash = async () => {\n        await SplashScreen.preventAutoHideAsync();\n        await sleep(3000);\n        await SplashScreen.hideAsync();\n    };\n\n    const sleep = (ms) => {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    };\n\n    const addToDo = async () => {\n        if (text === \"\") {\n            return;\n        }\n        console.log(\"add\", working);\n        const newToDos = { ...toDos, [Date.now()]: { text, working } };\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n        // save to do\n        setText(\"\");\n    };\n\n    const deleteTodo = (key) => {\n        if (Platform.OS === \"web\") {\n            const ok = confirm(\"Are you sure?\");\n            if (ok) {\n                const newToDos = { ...toDos };\n                delete newToDos[key];\n                setToDos(newToDos);\n                saveToDos(newToDos);\n            }\n        } else {\n            Alert.alert(\"Delete\", \"Are you sure?\", [\n                {\n                    text: \"cancel\",\n                    onPress: () => {\n                        return;\n                    },\n                },\n                {\n                    text: \"confirm\",\n                    style: \"destructive\",\n                    onPress: () => {\n                        const newToDos = { ...toDos };\n                        delete newToDos[key];\n                        setToDos(newToDos);\n                        saveToDos(newToDos);\n                    },\n                },\n            ]);\n        }\n    };\n\n    delay_splash();\n    return (\n        <View style={styles.container}>\n            <StatusBar style='auto' />\n            <View style={styles.header}>\n                <TouchableOpacity onPress={work}>\n                    <Text\n                        style={{\n                            fontSize: 38,\n                            fontWeight: \"600\",\n                            color: working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Work\n                    </Text>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={travel}>\n                    <Text\n                        style={{\n                            fontSize: 38,\n                            fontWeight: \"600\",\n                            color: !working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Travel\n                    </Text>\n                </TouchableOpacity>\n            </View>\n\n            <TextInput\n                onSubmitEditing={addToDo}\n                onChangeText={onChangeText}\n                returnKeyType='done'\n                value={text}\n                placeholder={working ? \"Add To Do\" : \"Where do you want to go?\"}\n                style={styles.input}\n            />\n            <ScrollView>\n                {Object.keys(toDos).map((key) =>\n                    toDos[key].working === working ? (\n                        <View style={styles.toDo} key={key}>\n                            <Text style={styles.toDoText}>\n                                {toDos[key].text}\n                            </Text>\n                            <TouchableOpacity onPress={() => deleteTodo(key)}>\n                                <Fontisto\n                                    name='trash'\n                                    size={18}\n                                    color='white'\n                                />\n                            </TouchableOpacity>\n                        </View>\n                    ) : null\n                )}\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: theme.bg,\n        paddingHorizontal: 20,\n    },\n    header: {\n        justifyContent: \"space-between\",\n        flexDirection: \"row\",\n        marginTop: 100,\n    },\n    input: {\n        backgroundColor: \"white\",\n        paddingVertical: 10,\n        paddingHorizontal: 20,\n        borderRadius: 30,\n        marginVertical: 20,\n        fontSize: 18,\n    },\n    toDo: {\n        backgroundColor: theme.grey,\n        marginBottom: 10,\n        paddingVertical: 20,\n        paddingHorizontal: 40,\n        borderRadius: 15,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n    },\n    toDoText: {\n        color: \"white\",\n        fontSize: 16,\n        fontWeight: \"500\",\n    },\n});\n"],"sourceRoot":""}